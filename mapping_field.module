<?php

/**
 * @file
 * Provides a mapping field, plus a formatter and widget for it.
 */

/**
 * Implements hook_field_info().
 */
function mapping_field_field_info() {
  $return = [];

  $return['mapping_field'] = [
    'label' => t('Mapping field'),
    'description' => t('This field stores mapping information in the database.'),
    'default_widget' => 'mapping_field_selector',
    'default_formatter' => 'mapping_field_formatter',
    'property_type' => 'mapping',
    'property_callbacks' => ['mapping_property_info_callback'],
  ];

  return $return;
}

/**
 * Callback to alter the property info of mapping fields.
 *
 * @see mapping_field_field_info().
 */
function mapping_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = ($field['cardinality'] != 1) ? 'list<mapping>' : 'mapping';
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['auto creation'] = 'mapping_field_data_auto_creation';
  $property['property info'] = mapping_field_data_property_info();

  unset($property['query callback']);
}

/**
 * Returns the default array structure for an mapping field for use when
 * creating new data arrays through an entity metadata wrapper.
 */
function mapping_field_data_auto_creation() {
  return ['source_plugin' => '_none', 'source_data' => [], 'destination_plugin' => '_none', 'destination_data' => []];
}

/**
 * Defines info for the properties of the mapping field data structure.
 */
function mapping_field_data_property_info($name = NULL) {
  return [
    'source_plugin' => [
      'label' => t('Source plugin name'),
      'description' => !empty($name) ? t('The plugin name of the mapping source for %name', ['%name' => $name]) : '',
      'type' => 'text',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ],
    'destination_plugin' => [
      'label' => t('Destination plugin name'),
      'description' => !empty($name) ? t('The plugin name of the mapping destination for %name', ['%name' => $name]) : '',
      'type' => 'text',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ],
    'source_data' => [
      'label' => t('Source mapping data'),
      'description' => !empty($name) ? t('The data for the mapping source for %name', ['%name' => $name]) : '',
      'type' => 'struct',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ],
    'destination_data' => [
      'label' => t('Destination mapping data'),
      'description' => !empty($name) ? t('The data for the mapping destination for %name', ['%name' => $name]) : '',
      'type' => 'struct',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ],
  ];
}

/**
 * Implements hook_field_load().
 */
function mapping_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  if ($field['type'] == 'mapping_field') {
    foreach ($entities as $id => $entity) {
      foreach ($items[$id] as $delta => &$item) {
        if (!empty($item['source_data'])) {
          $item['source_data'] = unserialize($item['source_data']);
        }
        if (!empty($item['destination_data'])) {
          $item['destination_data'] = unserialize($item['destination_data']);
        }
      }
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function mapping_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'mapping_field') {
    foreach ($items as $delta => &$item) {
      if (isset($item['source_data'])) {
        $item['source_data'] = serialize($item['source_data']);
      }
      else {
        $item['source_data'] = serialize([]);
      }
      if (isset($item['destination_data'])) {
        $item['destination_data'] = serialize($item['destination_data']);
      }
      else {
        $item['destination_data'] = serialize([]);
      }
    }
  }
}

/**
 * Implements hook_field_widget_info().
 */
function mapping_field_field_widget_info() {
  $return = [];

  $return['mapping_field_selector'] = [
    'label' => t('Mapping field selector'),
    'field types' => ['mapping_field'],
    'settings' => [],
    'behaviors' => [
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ],
  ];

  return $return;
 }

/**
 * Implements hook_field_is_empty().
 */
function mapping_field_field_is_empty($item, $field) {
  if ($item['source_plugin'] == '_none' && $item['destination_plugin'] == '_none') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_form().
 */
function mapping_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'mapping_field_selector':
      $args = $form_state['build_info']['args'];

      if (isset($args[1]) && is_array($args[1])) {
        $context = $args[1];

        $destination_plugins = mapping_field_get_plugins('mapping_destination');
        $element['destination_plugin'] = [
          '#type' => 'select',
          '#title' => t('Destination type'),
          '#options' => ['_none' => t('Select a destination type')] + mapping_field_get_plugin_options($destination_plugins),
          '#default_value' => isset($items[$delta]['destination_plugin']) ? $items[$delta]['destination_plugin'] : '_none',
        ];
        foreach($destination_plugins as $plugin_name => $plugin) {
          $plugin_instance = new $plugin['class']($context['destination']['entity_type'], $context['destination']['bundle']);
          $default_value = isset($items[$delta]['destination_data'][$plugin_name]) ? $items[$delta]['destination_data'][$plugin_name] : NULL;
          $field_name = format_string('!field_name[!langcode][!delta][destination_plugin]', [
            '!field_name' => $field['field_name'],
            '!langcode' => $langcode,
            '!delta' => $delta,
          ]);
          $states = [
            'visible' => [
              'select[name="' . $field_name . '"]' => [['value' => $plugin_name]],
            ]
          ];
          if ($plugin_form = $plugin_instance->getForm($default_value, $states)) {
            $element['destination_data'][$plugin_name] = $plugin_form;
          }
        }

        $source_plugins = mapping_field_get_plugins('mapping_source');
        $element['source_plugin'] = [
          '#type' => 'select',
          '#title' => t('Source type'),
          '#options' => ['_none' => t('Select a source type')] + mapping_field_get_plugin_options($source_plugins),
          '#default_value' => isset($items[$delta]['source_plugin']) ? $items[$delta]['source_plugin'] : '_none',
        ];
        foreach($source_plugins as $plugin_name => $plugin) {
          $plugin_instance = new $plugin['class']($context['header_file_uri']);
          $default_value = isset($items[$delta]['source_data'][$plugin_name]) ? $items[$delta]['source_data'][$plugin_name] : NULL;
          $field_name = format_string('!field_name[!langcode][!delta][source_plugin]', [
            '!field_name' => $field['field_name'],
            '!langcode' => $langcode,
            '!delta' => $delta,
          ]);
          $states = [
            'visible' => [
              'select[name="' . $field_name . '"]' => [['value' => $plugin_name]],
            ]
          ];
          if ($plugin_form = $plugin_instance->getForm($default_value, $states)) {
            $element['source_data'][$plugin_name] = $plugin_form;
          }
        }
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function mapping_field_field_formatter_info() {
  $return = [];

  $return['mapping_field_formatter'] = [
    'label' => t('Mapping field: Formatter'),
    'field types' => ['mapping_field'],
  ];

  return $return;
}

/**
 * Implements hook_field_formatter_view().
 */
function mapping_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, &$items, $display) {
  $settings = $display['settings'];

  $element = [];
  switch ($display['type']) {
    case 'mapping_field_formatter':
      foreach ($items as $delta => $item) {
        $plugin_name = $item['source_plugin'];
        if ($plugin_name !== '_none') {
          $plugin = mapping_field_get_plugin('mapping_source', $plugin_name);
          $plugin_data = is_scalar($item['source_data'][$plugin_name]) ? $item['source_data'][$plugin_name] : json_encode($item['source_data'][$plugin_name]);
          $element[$delta]['source'] = [
            '#theme' => 'html_tag',
            '#tag' => 'span',
            '#value' => t('!plugin_label: !column', ['!plugin_label' => $plugin['title'], '!column' => $plugin_data]),
            '#attributes' => [
              'class' => ['source-mapping'],
            ],
          ];
        }
        $plugin_name = $item['destination_plugin'];
        if ($plugin_name !== '_none') {
          $plugin = mapping_field_get_plugin('mapping_destination', $plugin_name);
          $plugin_data = is_scalar($item['destination_data'][$plugin_name]) ? $item['destination_data'][$plugin_name] : json_encode($item['destination_data'][$plugin_name]);
          $element[$delta]['destination'] = [
            '#theme' => 'html_tag',
            '#tag' => 'span',
            '#value' => t(' => !plugin_label: !field_name', ['!plugin_label' => $plugin['title'], '!field_name' => $plugin_data]),
            '#attributes' => [
              'class' => ['destination-mapping'],
            ],
          ];
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function mapping_field_ctools_plugin_type() {
  $return = [];

  $return['mapping_source'] = [
    'cache' => TRUE,
    'cache table' => 'cache',
    'use hooks' => FALSE,
    'classes' => ['class'],
  ];

  $return['mapping_destination'] = [
    'cache' => TRUE,
    'cache table' => 'cache',
    'use hooks' => FALSE,
    'classes' => ['class'],
  ];

  return $return;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function mapping_field_ctools_plugin_directory($owner, $plugin_type) {
  switch ("$owner:$plugin_type") {
    case 'mapping_field:mapping_source':
    case 'mapping_field:mapping_destination':
      return "plugins/$owner/$plugin_type";
  }

  return NULL;
}

/**
 * Get all mapping_destination plugins.
 *
 * @return mixed
 */
function mapping_field_get_plugins($type) {
  ctools_include('plugins');
  return ctools_get_plugins('mapping_field', $type);
}

/**
 * Get a mapping_destination plugin.
 *
 * @return mixed
 */
function mapping_field_get_plugin($type, $plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('mapping_field', $type, $plugin_name);
}

function mapping_field_get_plugin_options($plugins) {
  $options = [];
  foreach ($plugins as $plugin_name => $plugin) {
    $options[$plugin_name] = $plugin['title'];
  }
  return $options;
}